{"data":{"mark":{"html":"<div id=\"using-mongodb-mongoose\">\n                        <p>During the time of this course all CRUD (Create, Read, Update and Delete) operations will be\n                            done using\n                            Mongoose.\n                        </p>\n                        <p>Let's update our <code>german-todo-app</code> to have a database. ðŸŽ‰ðŸŽ‰\n                            By now we should have been able to setup our MongoDB environment and ready to build.</p>\n                        <p>If that's done follow the steps below to add a database to the application:</p>\n                        <ol>\n                            <li>Start up the MonogoDB server</li>\n                            <li>Start up Node.js Server for <code>german-todo-app</code></li>\n                            <li>Run <code>npm install mongodb mongoose</code> in the terminal</li>\n                            <li>Add the following code to <code>index.js</code></li>\n                            <div class=\"code-area\">\n                                <code>\n                                        <p>.....</p>\n                                        <p><const>const</const> MongoClient = <fnc>require</fnc>(<string>'mongoose'</string>)</p>\n                                        <p>....</p>\n        \n<p>MongoClient.<fnc>connect</fnc>(dbURI, {</p>\n                                            <p class=\"indent-1\"><props>useNewUrlParser</props>: <num>true</num>,</p>\n                                            <p class=\"indent-1\"><props>useCreatIndex</props>: <num>true</num></p>\n                                            <p>}, <fnc>(</fnc>err, db <fnc>) => </fnc>{</p>\n                                                <p class=\"indent-1\"><fnc>if</fnc>(err){</p>\n                                                    <p class=\"indent-2\"><props>console</props>.<fnc>log</fnc>(err);</p>\n                                                <p class=\"indent-1\">} <fnc>else</fnc> {</p>\n                                                    <p class=\"indent-2\"><props>console</props>.<fnc>log</fnc>(<string>`connected to <temp>${</temp></string> dbURI <string><temp>}</temp> Name : <temp>${</temp></string> db.Name<string><temp>}</temp></string>`);</p>\n                                                    <p class=\"indent-1\">}</p>\n                                        <p>})</p>\n                                        <p>.... </p>\n                                    </code>\n                            </div>\n                            <p>Awesome!</p>\n                            <li>Add the following code to <code>todo.js</code></li>\n                            <div id=\"mongodb-routes\">\n                                <h2>Updating Request to Use Mongoose</h2>\n                                Let's add a <code>post, put, and delete</code> request. And some more middleware\n                                bridges in\n                                the root app.\n                                Install some dependencies before we proceed.\n                                <ol>\n                                    <li>Run <code>npm i body-parser lodash</code></li>\n                                    <li>After a successful installation, modify the following codes:</li>\n                                    <li><code>require</code> dependencies</li>\n                                    <div class=\"code-area\">\n                                        <code>\n                                                    <p><const>const</const> {TodoModel} = <fnc>require</fnc>(<string>'../model/todo'</string>);</p>\n                                                </code>\n                                    </div>\n                                    <!-- GET todo/ -->\n                                    <li><code>GET /todo</code></li>\n                                    <div class=\"code-area\">\n                                        <code>\n                                                <p>route.<fnc>get</fnc>(<string>'/todo'</string>, <fnc>(</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                                    <p><comment><i>//</i></comment></p>\n                                                    <p class=\"indent-1\">try{</p>\n                                                    <p class=\"indent-2\"><const>const</const> todos <fnc>= await</fnc> TodoModel.<fnc>find</fnc>({});</p>\n                                                    <p class=\"indent-2\">res<fnc>.json</fnc>(todos);</p>\n                                                    <p class=\"indent-1\">}catch(err){</p>\n                                                    <p class=\"indent-3\"><fnc>next</fnc>(err);</p>\n                                                    <p class=\"indent-1\">}</p>\n                                               <p>});</p>                                       \n                                            </code>\n                                    </div>\n                                    <!-- GET todo/:id -->\n                                    <li><code>GET /todo/:id</code></li>\n                                    <div class=\"code-area\">\n                                        <code>\n                                                <p>route.<fnc>get</fnc>(<string>'/todo/:id'</string>, <fnc>async (</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                                    <p><comment><i>//</i></comment></p>\n                                                    <p class=\"indent-1\">try{</p>\n                                                        <p class=\"indent-2\"><const>const</const> todosById <fnc>= await </fnc>TodoModel.<const>findOne</const>({id:<fnc>parseInt</fnc>(req.params.id)});</p>\n                                                        <p class=\"indent-2\"><fnc>if</fnc>(!todosById){</p>\n                                                            <p class=\"indent-3\"><fnc> throw new Error</fnc>(<string>`Check id</string><temp>${</temp>req.params.id <temp>}</temp><string>`</string>)</p>\n                                                            <p class=\"indent-2\">}</p>\n                                                    <p class=\"indent-2\">res<fnc>.json</fnc>(todoById);</p>\n                                                    <p class=\"indent-1\">}catch(err){</p>\n                                                    <p class=\"indent-2\"><fnc>next</fnc>(err);</p>\n                                                    <p class=\"indent-1\">}</p>\n                                               <p>});</p>                                       \n                                            </code>\n                                    </div>\n                                    <!-- POST /todo -->\n                                    <li><code>POST /todo</code></li>\n                                    <div class=\"code-area\">\n                                        <code>\n                                                <p>route.<fnc>post</fnc>(<string>'/todo'</string>, <fnc>(</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                                    <p><comment><i>//</i></comment></p>\n                                                    <p class=\"indent-1\">try{</p>\n                                                        <p class=\"indent-2\"><const>const</const> newTodo <fnc>= await </fnc>TodoModel.<const>create</const>(req.body);</p>\n                                                        <p class=\"indent-2\"><fnc>if</fnc>(!newTodo){</p>\n                                                            <p class=\"indent-3\"><fnc> throw new Error</fnc>(<string>`Failed to add`</string>)</p>\n                                                            <p class=\"indent-2\">}</p>\n                                                    <p class=\"indent-2\">res<fnc>.json</fnc>(newTodo);</p>\n                                                    <p class=\"indent-1\">} catch(err){</p>\n                                                    <p class=\"indent-2\"><fnc>next</fnc>(err);</p>\n                                                    <p class=\"indent-1\">}</p>\n                                               <p>});</p>                                       \n                                            </code>\n                                    </div>\n                                    <!-- PUT /todo/:id -->\n                                    <li><code>PUT /todo/:id</code></li>\n                                    <div class=\"code-area\">\n                                        <code>\n                                                <p>route.<fnc>put</fnc>(<string>'/todo/:id'</string>, <fnc>async (</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                                    <p><comment><i>//</i></comment></p>\n                                                    <p class=\"indent-1\">try{</p>\n                                                        <p class=\"indent-2\"><const>const</const> toUpate <fnc>= await </fnc>TodoModel.<const>findOneAndUpdate</const>({id:<fnc>parseInt</fnc>(req.params.id)}, req.body);</p>\n                                                        <p class=\"indent-2\"><fnc>if</fnc>(!toupdate){</p>\n                                                            <p class=\"indent-3\"><fnc> throw new Error</fnc>(<string>`Invalid id: </string><temp>${</temp>req.params.id <temp>}</temp><string>`</string>)</p>\n                                                            <p class=\"indent-2\">}</p>\n                                                            <p class=\"indent-2\"><const>const</const> updated <fnc>= await </fnc>TodoModel.<const>findOne</const>({id: toUpate.id\n                                                            });</p>\n<p class=\"indent-2\">res<fnc>.json</fnc>(updated);</p>\n        \n<p class=\"indent-1\">}catch(err){</p>\n                                                    <p class=\"indent-2\"><fnc>next</fnc>(err);</p>\n                                                    <p class=\"indent-1\">}</p>\n                                               <p>});</p>                                       \n                                            </code>\n                                    </div>\n                                    <li><code>DELETE /todo/:id</code></li>\n                                    <div class=\"code-area\">\n                                        <code>\n                                            <p>route.<fnc>delete</fnc>(<string>'/todo/:id'</string>, <fnc>async (</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                                <p><comment><i>//</i></comment></p>\n                                                <p class=\"indent-1\">try{</p>\n                                                    <p class=\"indent-1\"><const>const</const> toDelete <fnc>= await </fnc>TodoModel.<const>findOneAndDelete</const>({id:<fnc>parseInt</fnc>(req.params.id)});</p> \n                                                    <p class=\"indent-2\"><fnc>if</fnc>(!toDelete){</p>\n                                                        <p class=\"indent-3\"><fnc> throw new Error</fnc>(<string>`Invalid id: </string><temp>${</temp>req.params.id <temp>}</temp><string>`</string>)</p>\n                                                        <p class=\"indent-2\">}</p>\n                                                    <p class=\"indent-2\">res<fnc>.json</fnc>(toDelete);</p>\n                                                    <p class=\"indent-1\">}catch(err){</p>\n                                                    <p class=\"indent-2\"><fnc>next</fnc>(err);</p>\n                                                    <p class=\"indent-1\">}</p>\n                                               <p>});</p>                                       \n                                            </code>\n                                    </div>\n                                    <li><code>export module</code></li>\n                                    <div class=\"code-area\"><code>\n                                            <props>module.exports</props> <num>=</num> route;\n                                        </code></div>\n                                </ol>\n                            </div>\n                        </ol>\n                    </div>","frontmatter":{"title":"Introducing Mongoose","topic":"MongoDB","author":"Codeekage","image":"/img/agiri.jpeg"},"fields":{"slug":"/mongodb/mongoose/"}},"all":{"totalCount":18,"edges":[{"node":{"id":"739e2e5f-153e-5321-83c9-a66f5bd4d973","frontmatter":{"title":"","date":null,"topic":null,"author":null},"fields":{"slug":"/node/installation/"},"excerpt":""}},{"node":{"id":"fcfd463f-8de4-54e4-befa-02ba53123700","frontmatter":{"title":"Introduction && Installation","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/introduction/"},"excerpt":""}},{"node":{"id":"c490dd4a-da75-5ea9-8b20-89a80c0ebf55","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"Apollo","author":"NIL"},"fields":{"slug":"/apollo/coming-soon/"},"excerpt":"Awaiting your awesomeness! ðŸš€ðŸš€ðŸŽŠðŸŽ‰"}},{"node":{"id":"f8ad58fa-cb91-50f5-b66a-9a4bfd48dd07","frontmatter":{"title":"Express Routing","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/routing/"},"excerpt":""}},{"node":{"id":"f7701f02-3e81-5396-9b11-8c7c89cabe20","frontmatter":{"title":"Overview","date":"10 August, 2017","topic":"Overview","author":"GERMANSTACK CREATOR"},"fields":{"slug":"/"},"excerpt":""}},{"node":{"id":"4d701b96-9eb8-525e-a031-449c3b2cbc0d","frontmatter":{"title":"Setting up Express","date":"10 August, 2017","topic":"Express","author":"Sani"},"fields":{"slug":"/express/setting-up/"},"excerpt":""}},{"node":{"id":"8e5dff1d-82da-599e-b0aa-75f31d400142","frontmatter":{"title":"Custom Middleware && Handlers","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/middleware-handlers/"},"excerpt":""}},{"node":{"id":"a2dafd6b-2f2b-566e-93ca-4b8ef706612c","frontmatter":{"title":"Express Middleware Functions","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/middleware/"},"excerpt":""}},{"node":{"id":"86b9a723-90de-5d66-9092-bcb27ef9a001","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"GraphQL","author":"NIL"},"fields":{"slug":"/graphql/coming-soon/"},"excerpt":"Awaiting your awesomeness! ðŸš€ðŸš€ðŸŽŠðŸŽ‰"}},{"node":{"id":"54bf3b55-67f2-5d84-a8ed-7f468734e3b0","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"How To(s)","author":"NIL"},"fields":{"slug":"/how-tos/coming-soon/"},"excerpt":"Awaiting your awesomeness! ðŸš€ðŸš€ðŸŽŠðŸŽ‰"}},{"node":{"id":"71f57527-1b61-526a-9a57-b62c46600745","frontmatter":{"title":"Packages && Modules","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/pacakge/"},"excerpt":""}},{"node":{"id":"a391f477-7c7f-5677-b509-7bd1d8632118","frontmatter":{"title":"Modules","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/modules/"},"excerpt":""}},{"node":{"id":"cd2f9cc4-1dc8-53f6-adca-ba28fb0b6225","frontmatter":{"title":"Introduction/Installation","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/introduction/"},"excerpt":"Node.js is an asynchronous event driven JavaScript runtime, designed to build scalable\nnetwork applications.\nAs an event driven JavaScriptâ€¦"}},{"node":{"id":"444a3a46-74ea-5bad-b7bd-343c3cef0151","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"React.js","author":"NIL"},"fields":{"slug":"/react/coming-soon/"},"excerpt":"Awaiting your awesomeness! ðŸš€ðŸš€ðŸŽŠðŸŽ‰"}},{"node":{"id":"e9c7ce29-8def-53c4-979d-d8b12830a3a2","frontmatter":{"title":"Setting Up Node Server","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/setting-up/"},"excerpt":""}},{"node":{"id":"6ca07e3b-67b8-56c9-a5f5-970a5f8a1d68","frontmatter":{"title":"Mongoose Schema","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/schema/"},"excerpt":""}},{"node":{"id":"a9561275-59fa-592a-9c18-9465e2454865","frontmatter":{"title":"Introducing Mongoose","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/mongoose/"},"excerpt":""}},{"node":{"id":"be48e74e-a76e-58e9-8f1a-759fd22afd12","frontmatter":{"title":"Introduction && Installation","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/introduction/"},"excerpt":""}}]}},"pageContext":{"slug":"/mongodb/mongoose/"}}