{"data":{"mark":{"html":"<div id=\"middleware-and-handlers\">\n                     <!--    <h3><i class=\"fa fa-link\"></i>Custom Functions and Handlers</h3> -->\n                        <p>With our knowledge of <i>Middleware Functions</i> building custom handlers, and middleware\n                            functions will be piece of cake. The concept behind middleware functions, that you should\n                            understand is Middleware Functions, are just function. Handlers, are functions designed to\n                            perform a specific task. </p>\n                        <p>Will be creating middleware functions with handlers to perform specific task e.g. Error\n                            handling, Log handling, and etc.</p>\n                        <p>The code below depicts a handler in a middleware function. </p>\n                        <div class=\"code-area\"><code>app.<fnc>use</fnc>(someHanlder)</code></div>\n                    </div>\n<div id=\"express-error-handling\">\n                        <h2><i class=\"fa fa-link\"></i>Error Handling in Express</h2>\n                        <p>This refers to how Express catches and processes errors that occurs both synchronously\n                            and\n                            asynchronously. </p>\n                        <p>Express comes with a default error handler, that you don‚Äôt necessarily need to write\n                            your own error handler to get started. The built-in error handler takes care of any\n                            error that may occur in the application. This default error-handling middleware\n                            function is added at the end of the middleware function stack. </p>\n                        <p>Using the <code>next()</code> to pass errors, you may not any custom error handler.\n                            Errors\n                            will be handled by the built-in error-handler; the error will be written to the client\n                            with the stack trace. </p>\n                        <p>This stack trace are not included in productions, so even if a the <code>next()</code>\n                            is\n                            called with error after you‚Äôve started writing the response (for example, if you\n                            encounter an error while sending a response across to a client) the Express default\n                            error handler closes the connection and fails the request AKA the application goes\n                            bazooka! Crashes. </p>\n                        <p>In this scenario, custom error handler becomes extremely important. We don‚Äôt want\n                            applications going nuts in production. In a custom error handler, you must delegate to\n                            the default Express error handler, when the errors have already been sent to the\n                            client. </p>\n                        <p>Like every we‚Äôve written, has three (3) arguments. Defining error-handlers requires\n                            four (4) argument instead of three(3) <code>(err, req, res, next)</code></p>\n                        <p>Let‚Äôs add some code to our <code>index.js</code></p>\n                        <div class=\"code-area\">\n                            <code>\n                                        <p>....</p>\n                                        <comment><i>//hanlder function</i></comment>\n                                        <p>function <fnc>errorHandler(</fnc>err, req, res, next<fnc>){</fnc></p>\n                                            <p class=\"inner-1\"><props>console</props>.<fnc>error</fnc>(err.stack)</p>\n                                            <p class=\"inner-1\"> res.<const>status(<num>500</num>)</const>.<fnc>send</fnc>({</p>\n                                                <p class=\"inner-2\"><string>error : </string> err.message</p>\n                                                <p class=\"inner-1\">});</p>\n                                                <p class=\"inner-1\"><fnc>next</fnc>(err);</p>\n                                        <p>}</p>\n                                        <p><comment><i>//milddware function</i></comment></p>\n                                        <p>app.<fnc>use</fnc>(errorHandler);</p>\n                                        ......\n                                    </code>\n                        </div>\n                        <p>Responses from within a middleware function can be in any format, such as an HTML error\n                            page, a simple message, or a JSON string. </p>\n                        <p>Note:</p>\n                        <ol type=\"i\">\n                            <li>The default error handler can get triggered if you call <code>next()</code> with an\n                                error in your code more than once, even if custom error handling middleware is in\n                                place. </li>\n                            <li>You define error-handling middleware last, after other <code>app.use()</code> and\n                                routes calls.</li>\n                        </ol>\n                        <p>Try out your codes and ensure nothing is breaking or acting freaking funny.</p>\n                    </div>\n                    <div id=\"summary\">\n                        <h3><i class=\"fa fa-link\"></i>Summary</h3>\n                        <p>So far we've learnt a lot and have crossed from being a novice Node.js developer,\n                            to a beginner who understands concept not just a coder. Know this, remembering the syntax\n                            isn't really neccessary\n                            but understanding the concept and what is, and who is? That's what makes you an awesome\n                            developer.\n                        </p>\n                        <p>Before we dot our 'i' and cross out 't(s)'. Let's make the API we've designed\n                            available for consumption.\n                        </p>\n                        <p>Follow the steps and further explanation will done later in this course.</p>\n                        <ol>\n                            <li><code>npm install cors</code></li>\n                            <li>Modify <code>index.js</code> to have the following codes: </li>\n                            <div class=\"code-area\"><code>\n                                <p>...</p>\n                                <p><comment><i>//require dependencies</i></comment></p>\n                                <p><const>const</const> cors = <fnc>require</fnc>(<string>'cors'</string>)</p>\n                                <p><const>const</const> bodyParser = <fnc>require</fnc>(<string>'bodyParser'</string>)</p>\n                                <p><comment><i>//cors options</i></comment></p>\n                                <p><const>let</const> corsOptions <fnc>=</fnc> {</p>\n                                    <p class=\"inner-1\"><props>origin :</props> <string>\"*\"</string>,</p>\n                                    <p class=\"inner-1\"><props>optionSuccessStatus :</props> <num>200</num></p>\n                                <p>}</p>\n                                <p><comment><i>//cors middleware function</i></comment></p>\n                                <p>app.<fnc>use</fnc>(<fnc>cors</fnc>(corsOptions));</p>\n                                <p><comment><i>//json parser middleware function for [POST, PUT, DElETE] </i></comment></p>\n                                <p>app.<fnc>use</fnc>(bodyParser.<fnc>json</fnc>());</p>\n                                <p>app.<fnc>use</fnc>(express.<fnc>urlencoded</fnc>({<props>extended : <num>false</num></props>}));</p>\n                                <p><comment><i>//errorHandler middleware function</i></comment></p>\n                                <p>app.<fnc>use</fnc>(errorHandler);</p>\n                                <p>....</p>\n                            </code></div>\n                        </ol>\n                        <h4>üèãÔ∏è‚ÄçüèãÔ∏è‚ÄçChallengeüèãÔ∏è‚ÄçüèãÔ∏è‚Äç</h4>\n                        <p>Using <code>fetch API</code></p>\n                        <ol>\n                            <li>Design a static <code>HTML, CSS, JS</code> client side webpage</li>\n                            <li>Use JavaScript <code>fetch api</code> to call the endpoints</li>\n                            <ol type=\"i\">\n                                <li>Render the data from the API</li>\n                                <li>Add todos to the API</li>\n                                <li>Edit todos and also delete todos</li>\n                            </ol>\n                            <li>Ensure to add proper comments in the: <code>HTML, CSS, and JS</code> files.</li>\n                            <li>Commit and push the codes to <code>german-todo-app</code> repo created earlier in this\n                                course.</li>\n                            <li>Good Luck üèÜüèÜüèÜüèÜüèÜ</li>\n                        </ol>\n</div>","frontmatter":{"title":"Custom Middleware && Handlers","topic":"Express","author":"Codeekage","image":"/img/agiri.jpeg"},"fields":{"slug":"/express/middleware-handlers/"}},"all":{"totalCount":18,"edges":[{"node":{"id":"739e2e5f-153e-5321-83c9-a66f5bd4d973","frontmatter":{"title":"","date":null,"topic":null,"author":null},"fields":{"slug":"/node/installation/"},"excerpt":""}},{"node":{"id":"fcfd463f-8de4-54e4-befa-02ba53123700","frontmatter":{"title":"Introduction && Installation","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/introduction/"},"excerpt":""}},{"node":{"id":"c490dd4a-da75-5ea9-8b20-89a80c0ebf55","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"Apollo","author":"NIL"},"fields":{"slug":"/apollo/coming-soon/"},"excerpt":"Awaiting your awesomeness! üöÄüöÄüéäüéâ"}},{"node":{"id":"f8ad58fa-cb91-50f5-b66a-9a4bfd48dd07","frontmatter":{"title":"Express Routing","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/routing/"},"excerpt":""}},{"node":{"id":"f7701f02-3e81-5396-9b11-8c7c89cabe20","frontmatter":{"title":"Overview","date":"10 August, 2017","topic":"Overview","author":"GERMANSTACK CREATOR"},"fields":{"slug":"/"},"excerpt":""}},{"node":{"id":"4d701b96-9eb8-525e-a031-449c3b2cbc0d","frontmatter":{"title":"Setting up Express","date":"10 August, 2017","topic":"Express","author":"Sani"},"fields":{"slug":"/express/setting-up/"},"excerpt":""}},{"node":{"id":"8e5dff1d-82da-599e-b0aa-75f31d400142","frontmatter":{"title":"Custom Middleware && Handlers","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/middleware-handlers/"},"excerpt":""}},{"node":{"id":"a2dafd6b-2f2b-566e-93ca-4b8ef706612c","frontmatter":{"title":"Express Middleware Functions","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/middleware/"},"excerpt":""}},{"node":{"id":"86b9a723-90de-5d66-9092-bcb27ef9a001","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"GraphQL","author":"NIL"},"fields":{"slug":"/graphql/coming-soon/"},"excerpt":"Awaiting your awesomeness! üöÄüöÄüéäüéâ"}},{"node":{"id":"54bf3b55-67f2-5d84-a8ed-7f468734e3b0","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"How To(s)","author":"NIL"},"fields":{"slug":"/how-tos/coming-soon/"},"excerpt":"Awaiting your awesomeness! üöÄüöÄüéäüéâ"}},{"node":{"id":"71f57527-1b61-526a-9a57-b62c46600745","frontmatter":{"title":"Packages && Modules","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/pacakge/"},"excerpt":""}},{"node":{"id":"a391f477-7c7f-5677-b509-7bd1d8632118","frontmatter":{"title":"Modules","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/modules/"},"excerpt":""}},{"node":{"id":"cd2f9cc4-1dc8-53f6-adca-ba28fb0b6225","frontmatter":{"title":"Introduction/Installation","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/introduction/"},"excerpt":"Node.js is an asynchronous event driven JavaScript runtime, designed to build scalable\nnetwork applications.\nAs an event driven JavaScript‚Ä¶"}},{"node":{"id":"444a3a46-74ea-5bad-b7bd-343c3cef0151","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"React.js","author":"NIL"},"fields":{"slug":"/react/coming-soon/"},"excerpt":"Awaiting your awesomeness! üöÄüöÄüéäüéâ"}},{"node":{"id":"e9c7ce29-8def-53c4-979d-d8b12830a3a2","frontmatter":{"title":"Setting Up Node Server","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/setting-up/"},"excerpt":""}},{"node":{"id":"6ca07e3b-67b8-56c9-a5f5-970a5f8a1d68","frontmatter":{"title":"Mongoose Schema","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/schema/"},"excerpt":""}},{"node":{"id":"a9561275-59fa-592a-9c18-9465e2454865","frontmatter":{"title":"Introducing Mongoose","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/mongoose/"},"excerpt":""}},{"node":{"id":"be48e74e-a76e-58e9-8f1a-759fd22afd12","frontmatter":{"title":"Introduction && Installation","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/introduction/"},"excerpt":""}}]}},"pageContext":{"slug":"/express/middleware-handlers/"}}