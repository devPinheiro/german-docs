{"data":{"mark":{"html":"<div id=\"express-middleware\">\n                      \n                        <p>We've successfully added some working codes, but we barely understand what's going on.\n                            'üôÑü§∑‚Äçü§¶‚ÄçÔ∏è' Happy it's working.üòÅüòÅ\n                        </p>\n                        <p>Review the codes:</p>\n                        <ol>\n                            <li><code>app.use()</code></li>\n                            <li><code>route.get('/', (req, res, next))</code></li>\n                        </ol>\n                        <p>All these to us now are jargons!</p>\n                        <p>Understanding middlewares will give us a grasp on the codes. First, what's a <b>Middleware\n                                Function?</b></p>\n                        <p>\n                            <i>Middleware Funcitons:</i> are functions that have access to the request\n                            object (<code>req</code>), the response object(<code>res</code>), and the <code>next</code>\n                            function <i>(in the application‚Äôs\n                                request-response cycle)</i>.\n                        </p>\n                        <p>Middleware functions can perform the following task</p>\n                        <ol type=\"i\">\n                            <li>Execute any code.\n                            </li>\n                            <li>Make changes to the request and the response objects.\n                            </li>\n                            <li>End the request-response cycle.\n                            </li>\n                            <li>Call the next middle in the stack.\n                            </li>\n                        </ol>\n<div id=\"next-function\">\n                            <h3>The <code>next()</code> Function</h3>\n                            <p>Is a function in the Express router which, when invoked, executes the\n                                middleware succeeding the current middleware. </p>\n                            <p>\n                                If the current middleware function does not end a <code>request-response cycle</code>,\n                                it\n                                must call <code>next()</code>\n                                to pass control to the next middleware function. Where this fails the request will be\n                                left\n                                hanging.\n                            </p>\n<p>With the defintions of <code>middleware functions</code> we now know <code>app.get</code>\n                                is\n                                a middleware function, because it has access to the <code>(req, res)</code> objects,\n                                and\n                                the <code>next</code> function.\n                                <code>next</code> can be anything, but by convention <code>next</code> is commonly\n                                used.\n                            </p>\n                            <p>A middeleware also acts as a bridge between an operating system or database and\n                                applications, especially on a network. <code>app.use</code> is a bridge a between our\n                                routes and the application.</p>\n                            <p>Earlier, the routes were not exposed when we first created them in <code>todo.js</code>,\n                                that's because we needed a brigde between the root app in the <code>index.js</code>\n                                file\n                                and our routes in\n                                <code>todo.js</code> so, we implemented <code>app.use</code> and required our routes.</p>\n                            <p>In other words, <code>app.use()</code> acts as a bridge between a middleware function\n                                and\n                                the application request-response cycle.</p>\n                        </div>\n                        <div id=\"more-routes\">\n                            <h1>Adding More Request</h1>\n                            Let's add a <code>post, put, and delete</code> request. And some more middleware bridges in\n                            the root app.\n                            Install some dependencies before we proceed.\n                            <ol>\n                                <li>Run <code>npm i body-parser lodash</code></li>\n                                <li>After a successful installation, modify the following codes:</li>\n                                <li><code>require</code> dependencies</li>\n                                <div class=\"code-area\">\n                                    <code>\n                                        <p><const>const</const> express = <fnc>require</fnc>(<string>'express'</string>);</p>\n                                        <p><const>const</const> _ = <fnc>require</fnc>(<string>'lodash'</string>);</p> \n                                        <p><const>const</const> route = express.<code>Router</code>();</p>\n                                    </code>\n                                </div>\n                                <!-- todo/ GET -->\n                                <li><code>GET /todo</code></li>\n                                <div class=\"code-area\">\n                                    <code>\n                                        <p>route.<fnc>get</fnc>(<string>'/todo'</string>, <fnc>(</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                            <p><comment><i>//</i></comment></p>\n                                            <p class=\"indent-1\">try{</p>\n                                            <p class=\"indent-2\">res<fnc>.json</fnc>(todo);</p>\n                                            <p class=\"indent-1\">}catch(err){</p>\n                                            <p class=\"indent-3\"><fnc>next</fnc>(err);</p>\n                                            <p class=\"indent-1\">}</p>\n                                       <p>});</p>                                       \n                                    </code>\n                                </div>\n                                <!-- todo/:id -->\n                                <li><code>GET /todo/:id</code></li>\n                                <div class=\"code-area\">\n                                    <code>\n                                        <p>route.<fnc>get</fnc>(<string>'/todo/:id'</string>, <fnc>async (</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                            <p><comment><i>//</i></comment></p>\n                                            <p class=\"indent-1\">try{</p>\n                                                <p class=\"indent-2\"><const>const</const> todosById <fnc>= await  _.filter</fnc>(todo, {id : <fnc>parseInt</fnc>(req.params.id)});</p>\n                                                <p class=\"indent-2\"><fnc>if</fnc>(todosById.<string>length</string> <fnc><=</fnc> <num>1</num>){</p>\n                                                    <p class=\"indent-1\"><fnc> throw new Error</fnc>(<string>`Check id</string><temp>${</temp>req.params.id <temp>}</temp><string>`</string>)</p>\n                                                    <p class=\"indent-2\">}</p>\n                                            <p class=\"indent-2\">res<fnc>.json</fnc>(todo);</p>\n                                            <p class=\"indent-1\">}catch(err){</p>\n                                            <p class=\"indent-3\"><fnc>next</fnc>(err);</p>\n                                            <p class=\"indent-2\">}</p>\n                                       <p>});</p>                                       \n                                    </code>\n                                </div>\n                                <li><code>POST /todo</code></li>\n                                <div class=\"code-area\">\n                                    <code>\n                                        <p>route.<fnc>post</fnc>(<string>'/todo'</string>, <fnc>(</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                            <p><comment><i>//</i></comment></p>\n                                            <p class=\"indent-1\">try{</p>\n                                                <p class=\"indent-2\"><const>const</const> newTodo <fnc>= await  _.concat</fnc>(todo, req.body);</p>\n                                                <p class=\"indent-2\"><fnc>if</fnc>(!newTodo){</p>\n                                                    <p class=\"indent-3\"><fnc> throw new Error</fnc>(<string>`Failed to add`</string>)</p>\n                                                    <p class=\"indent-2\">}</p>\n                                            <p class=\"indent-2\">res<fnc>.json</fnc>(newTodo);</p>\n                                            <p class=\"indent-2\">}catch(err){</p>\n                                            <p class=\"indent-3\"><fnc>next</fnc>(err);</p>\n                                            <p class=\"indent-2\">}</p>\n                                       <p>});</p>                                       \n                                    </code>\n                                </div>\n                                <li><code>PUT /todo/:id</code></li>\n                                <div class=\"code-area\">\n                                    <code>\n                                        <p>route.<fnc>put</fnc>(<string>'/todo/:id'</string>, <fnc>async (</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                            <p><comment><i>//</i></comment></p>\n                                            <p class=\"indent-1\">try{</p>\n                                                <p class=\"indent-2\"><const>const</const> todosById <fnc>= await _.findIndex</fnc>(todo, {id : <fnc>parseInt</fnc>(req.params.id)});</p>\n                                                <p class=\"indent-2\"><fnc>if</fnc>(index <fnc>===</fnc> <num>-1</num>){</p>\n                                                    <p class=\"indent-3\"><fnc> throw new Error</fnc>(<string>`Invalid id: </string><temp>${</temp>req.params.id <temp>}</temp><string>`</string>)</p>\n                                                    <p class=\"indent-2\">}</p>\n                                                    <p class=\"indent-2\">todo[index] <num>=</num> req.body;</p>\n                                            <p class=\"indent-2\">res<fnc>.json</fnc>(todo);</p>\n<p class=\"indent-2\">}catch(err){</p>\n                                            <p class=\"indent-3\"><fnc>next</fnc>(err);</p>\n                                            <p class=\"indent-2\">}</p>\n                                       <p>});</p>                                       \n                                    </code>\n                                </div>\n                                <li><code>DELETE /todo/:id</code></li>\n                                <div class=\"code-area\">\n                                    <code>\n                                        <p>route.<fnc>delete</fnc>(<string>'/todo/:id'</string>, <fnc>async (</fnc>req, res, next<fnc>) =></fnc> {</p>\n                                            <p><comment><i>//</i></comment></p>\n                                            <p class=\"indent-1\">try{</p>\n                                                <p class=\"indent-2\"><fnc>await _.remove</fnc>(todo, {id : <fnc>parseInt</fnc>(req.params.id)});</p>\n                                            <p class=\"indent-2\">res<fnc>.json</fnc>(todo);</p>\n <p class=\"indent-2\">}catch(err){</p>\n                                            <p class=\"indent-3\"><fnc>next</fnc>(err);</p>\n                                            <p class=\"indent-2\">}</p>\n                                       <p>});</p>                                       \n                                    </code>\n                                </div>\n                                <li><code>export module</code></li>\n                                <div class=\"code-area\"><code>\n                                    <props>module.exports</props> <num>=</num> route;\n                                </code></div>\n                            </ol>\n                        </div>\n                        <div id=\"test-routes\">\n                            <h4>Testing Our Routes</h4>\n                            <p>To check if all we've done works, we need one extra installation. PostMan, is highly\n                                recommended for testing APIs, it ease testing out <code>post, put, and delete</code>request.</p>\n                            <ol>\n                                <li>Install PostMan</li>\n                            </ol>\n                            <p>The interface is quite easy to understand. You can read up the docs to help you get\n                                started.\n                                When you are a little bit comforatable with the docs, restart the server and test the\n                                API we designed.</p>\n                        </div>\n                    </div>","frontmatter":{"title":"Express Middleware Functions","topic":"Express","author":"Codeekage","image":"/img/agiri.jpeg"},"fields":{"slug":"/express/middleware/"}},"all":{"totalCount":18,"edges":[{"node":{"id":"739e2e5f-153e-5321-83c9-a66f5bd4d973","frontmatter":{"title":"","date":null,"topic":null,"author":null},"fields":{"slug":"/node/installation/"},"excerpt":""}},{"node":{"id":"fcfd463f-8de4-54e4-befa-02ba53123700","frontmatter":{"title":"Introduction && Installation","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/introduction/"},"excerpt":""}},{"node":{"id":"c490dd4a-da75-5ea9-8b20-89a80c0ebf55","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"Apollo","author":"NIL"},"fields":{"slug":"/apollo/coming-soon/"},"excerpt":"Awaiting your awesomeness! üöÄüöÄüéäüéâ"}},{"node":{"id":"f8ad58fa-cb91-50f5-b66a-9a4bfd48dd07","frontmatter":{"title":"Express Routing","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/routing/"},"excerpt":""}},{"node":{"id":"f7701f02-3e81-5396-9b11-8c7c89cabe20","frontmatter":{"title":"Overview","date":"10 August, 2017","topic":"Overview","author":"GERMANSTACK CREATOR"},"fields":{"slug":"/"},"excerpt":""}},{"node":{"id":"4d701b96-9eb8-525e-a031-449c3b2cbc0d","frontmatter":{"title":"Setting up Express","date":"10 August, 2017","topic":"Express","author":"Sani"},"fields":{"slug":"/express/setting-up/"},"excerpt":""}},{"node":{"id":"8e5dff1d-82da-599e-b0aa-75f31d400142","frontmatter":{"title":"Custom Middleware && Handlers","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/middleware-handlers/"},"excerpt":""}},{"node":{"id":"a2dafd6b-2f2b-566e-93ca-4b8ef706612c","frontmatter":{"title":"Express Middleware Functions","date":"10 August, 2017","topic":"Express","author":"Codeekage"},"fields":{"slug":"/express/middleware/"},"excerpt":""}},{"node":{"id":"86b9a723-90de-5d66-9092-bcb27ef9a001","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"GraphQL","author":"NIL"},"fields":{"slug":"/graphql/coming-soon/"},"excerpt":"Awaiting your awesomeness! üöÄüöÄüéäüéâ"}},{"node":{"id":"54bf3b55-67f2-5d84-a8ed-7f468734e3b0","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"How To(s)","author":"NIL"},"fields":{"slug":"/how-tos/coming-soon/"},"excerpt":"Awaiting your awesomeness! üöÄüöÄüéäüéâ"}},{"node":{"id":"71f57527-1b61-526a-9a57-b62c46600745","frontmatter":{"title":"Packages && Modules","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/pacakge/"},"excerpt":""}},{"node":{"id":"a391f477-7c7f-5677-b509-7bd1d8632118","frontmatter":{"title":"Modules","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/modules/"},"excerpt":""}},{"node":{"id":"cd2f9cc4-1dc8-53f6-adca-ba28fb0b6225","frontmatter":{"title":"Introduction/Installation","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/introduction/"},"excerpt":"Node.js is an asynchronous event driven JavaScript runtime, designed to build scalable\nnetwork applications.\nAs an event driven JavaScript‚Ä¶"}},{"node":{"id":"444a3a46-74ea-5bad-b7bd-343c3cef0151","frontmatter":{"title":"Coming Soon","date":"10 August, 2017","topic":"React.js","author":"NIL"},"fields":{"slug":"/react/coming-soon/"},"excerpt":"Awaiting your awesomeness! üöÄüöÄüéäüéâ"}},{"node":{"id":"e9c7ce29-8def-53c4-979d-d8b12830a3a2","frontmatter":{"title":"Setting Up Node Server","date":"10 August, 2017","topic":"Node.js","author":"Codeekage"},"fields":{"slug":"/node/setting-up/"},"excerpt":""}},{"node":{"id":"6ca07e3b-67b8-56c9-a5f5-970a5f8a1d68","frontmatter":{"title":"Mongoose Schema","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/schema/"},"excerpt":""}},{"node":{"id":"a9561275-59fa-592a-9c18-9465e2454865","frontmatter":{"title":"Introducing Mongoose","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/mongoose/"},"excerpt":""}},{"node":{"id":"be48e74e-a76e-58e9-8f1a-759fd22afd12","frontmatter":{"title":"Introduction && Installation","date":"10 August, 2017","topic":"MongoDB","author":"Codeekage"},"fields":{"slug":"/mongodb/introduction/"},"excerpt":""}}]}},"pageContext":{"slug":"/express/middleware/"}}